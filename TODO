☐ TP LIST CLIENTS

      "state": "INACTIVE",
      "tva": 20,
      "id": 2,
      "name": "Modis",
      "totalCaHt": 120000,
      "comment": "un comment pour client modis"

  ☐ Enum StateClient (ACTIVE, INACTIVE)
  ☐ Interface ClientI
  ☐ Model (class) Client (tva = 20, totalCaHt = 0, state = StateClient.INACTIVE)
  ☐ ClientsService
  ☐ ListClientsComponent dans le ts (ex sur ListOrdersComponent)
  ☐ list-clients-component.html
    ☐ utiliser le même template avec un title "List Clients"
    ☐ utiliser le même tableau (Name, total ht, total ttc, state)
    ☐ pour le total ttc on utilise le même pipe total
    ☐ pour la directive on utilise la même directive StateDirective
    ☐ les class css state-active, state-inactive à ajouter sur table-light.scss
    ☐ utiliser le même bouton (text="Add Client" path="add")



☐ Pipe async
☐ Validators


☐ TP EDIT ORDER

  ☐ page-list-orders.component.html
    ☐ ajoute un td au debut d'un tr et on met un icon-edit dedans
    ☐ (click)="goToEdit(item.id)"
  ☐ page-list-orders.component.ts
    ☐ Ajouter "Actions" en entête
    ☐ Déclarer fa fn goToEdit(id: number):void et rediriger vers la route orders/edit/3
    this.router.navigate(['orders', 'edit', id])
  ☐ order-routing.module.ts
    ☐ modifier la route edit pour qu'elle autorise un paramètre id après le edit/

  on arrive sur la route orders/edit/3
  ☐ page-edit-order-component.ts
    ☐ Récupérer l'id dans la route (ActivatedRoute)
    ☐ this.ordersService.getItemById(id).subscribe(....flux etant votre item)
    ☐ dans le subscribe() on recupère le flux et on initialise une propriété item: Order;
  ☐ orders.service.ts
    ☐ Déclare la fn getItemById(id: number): Observable<Order>
  ☐ page-edit-order.component.html
    ☐ On utilise template-container component
    ☐ On utilise form-order component : Binder l'@Input() init avec la propriété item (attention à la valeur d'item)
    ☐ Pour l'@Output() (submited)="edit($event)"
  ☐ page-edit-order.component.ts
    ☐ Déclarer la fn edit(item: Order) {utliser this.ordersService.update(item).subscribe(...res api)}
    ☐ Dans le subscribe, rediriger l'utilisateur vers la route orders
